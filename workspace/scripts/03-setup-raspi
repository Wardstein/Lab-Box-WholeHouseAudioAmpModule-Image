set -x
set -e

export LC_ALL=C

source /common.sh
install_cleanup_trap

# Scripts run as root by default

# raspi-config cli documentation
# https://www.raspberrypi.com/documentation/computers/configuration.html#raspi-config-cli



# ADD OUR NEW DEFAULT USER ------------------------------------------------------------------------------------------------------------------------------------
adduser --gecos "" --disabled-password $RASPI_USER
chpasswd <<<"$RASPI_USER:$RASPI_PASSWORD"
usermod -a -G users,adm,dialout,audio,netdev,video,plugdev,cdrom,games,input,gpio,spi,i2c,render,sudo $RASPI_USER
# Show a control output which groups the user is in
groups $RASPI_USER

# Make sure user doesn't require a password when running as sudo; https://github.com/Pioreactor/CustoPiZer/blob/pioreactor/workspace/scripts/01-make-pioreactor-user.sh
echo "$RASPI_USER ALL=(ALL) NOPASSWD: ALL" | sudo EDITOR='tee -a' visudo -f /etc/sudoers.d/010_$RASPI_USER-nopasswd

# Remove SSH pre-authentication banner
rm -f /etc/ssh/sshd_config.d/rename_user.conf



# REMOVE NOT NEEDED SOFTWARE ----------------------------------------------------------------------------------------------------------------------------------
# https://github.com/gitbls/sdm/blob/master/plugins/disables#L90
systemctl disable triggerhappy.service 
systemctl disable triggerhappy.socket
[ -f /lib/udev/rules.d/60-triggerhappy.rules ] && mv /lib/udev/rules.d/60-triggerhappy.rules /lib/udev/rules.d/.60-triggerhappy-save.rules
[ -f /usr/sbin/thd ] && mv /usr/sbin/thd /usr/sbin/thd.save

systemctl disable dphys-swapfile.service
systemctl disable userconfig.service
apt purge -y piwiz

# Just unistalling pywiz does not solve the startup. We boot into "rpi-first-boot-wizard" user
# https://forums.raspberrypi.com/viewtopic.php?p=2036168&sid=7e348ea4c90ad0c51def1eb973b20258#p2036168
[ -f /etc/xdg/autostart/piwiz.desktop ] && mv /etc/xdg/autostart/piwiz.desktop /etc/xdg/autostart/.piwiz.desktop.save
systemctl disable userconfig.service > /dev/null 2>&1
systemctl mask    userconfig.service > /dev/null 2>&1
[ "$(getent passwd rpi-first-boot-wizard)" != "" ] && userdel -r rpi-first-boot-wizard > /dev/null 2>&1
[ -f /etc/systemd/system/getty@tty1.service.d/autologin.conf ] && mv /etc/systemd/system/getty@tty1.service.d/autologin.conf /etc/systemd/system/getty@tty1.service.d/.autologin.conf.save
rm -f /etc/sudoers.d/010_wiz-nopasswd
rm -f /etc/xdg/autostart/deluser.desktop


# -------------------------------------------------------------------------------------------------------------------------------------------------------------
# Despite the config.txt and cmdline.txt are moved into /boot/firmware folders, we write to the /boot folder directly.
# The files from the boot folder are automatically moved into the /boot/firmware folder on first start (at time of writing 13.11.2024)
# https://github.com/raspberrypi/documentation/issues/3089
CMDLINE_FILE="/boot/cmdline.txt"
# If the /boot/firmware folder should exist in the future, this should then set the correct path in the future
if [ -d /boot/firmware ]; then
	CMDLINE_FILE="/boot/firmware/cmdline.txt"
fi


# CREATE A ONE-TIME SETUP FILE --------------------------------------------------------------------------------------------------------------------------------
FIRSTBOOT_FILE="/firstboot.sh"
rm -f $FIRSTBOOT_FILE

# Source of the logging to file method: https://stackoverflow.com/a/315113/3402598

cat <<EOF > $FIRSTBOOT_FILE
#!/bin/bash\n" 

{		# Everything in the brackets will go to the log file\n" >> 

echo "raspi-config do_hostname"
raspi-config nonint do_hostname $RASPI_HOSTNAME

# Enable SSH for login
echo "Enable SSH"
systemctl enable ssh
systemctl start ssh

# Enable predictable network interface names
echo "raspi-config do_net_names"
raspi-config nonint do_net_names 0

# Hardware interfaces like SPI, I2C and Serial are already set in the config.txt file in a prior CustoPiZer step

echo "daemon-reload"
systemctl daemon-reload

# Removing systemd start arguments in the cmdline.txt to be replaced down below with our own firstboot.sh script
# As we do not know when exactly the cmdline.txt file is moved, we try it in both paths
echo "sed cmdline.txt"
sed -i 's| systemd.run.*||g' /boot/cmdline.txt
sed -i 's| systemd.run.*||g' /boot/firmware/cmdline.txt
sed -i 's| systemd.unit=kernel.*||g' /boot/cmdline.txt
sed -i 's| systemd.unit=kernel.*||g' /boot/firmware/cmdline.txt
echo "rm $FIRSTBOOT_FILE"
rm -f $FIRSTBOOT_FILE
exit 0
} 2>&1 | tee /var/log/firstboot.log
EOF

chmod +x $FIRSTBOOT_FILE

cat $FIRSTBOOT_FILE

# Replace a possible new line character at the end of the line, then append our new stuff
sed -i ':a;N;$!ba;s/\n/ /g' $CMDLINE_FILE
echo -n " systemd.run=$FIRSTBOOT_FILE systemd.run_success_action=reboot systemd.unit=kernel-command-line.target" >> $CMDLINE_FILE
cat $CMDLINE_FILE


# Image information file --------------------------------------------------------------------------------------------------------------------------------------
cp /files/README_Lab-Box_Image.txt /README_Lab-Box_Image.txt
echo -e "\n\nImage was build from:\nGit branch: $GITHUB_ENV_REF_NAME\nCommit: $GITHUB_ENV_SHA" >> /README_Lab-Box_Image.txt
